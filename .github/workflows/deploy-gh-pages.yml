name: Canary Deployment & Analytics

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      task:
        description: 'Task to run (deploy, analyze, or adjust-canary)'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - analyze
          - adjust-canary
      canary_percentage:
        description: 'New canary percentage (only for adjust-canary task)'
        required: false
        type: number
  schedule:
    - cron: '*/5 * * * *' # Run every 5 minutes
  #   - cron: '0 */6 * * *' # Run every 6 hours

permissions:
  contents: write
  pages: write
  id-token: write

# Define reusable values
env:
  NODE_VERSION: '22'
  GIT_USER_NAME: 'lloydchang'
  GIT_USER_EMAIL: 'lloydchang@gmail.com'

jobs:
  # Deployment job
  build-and-deploy:
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'deploy')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
      
      - name: Setup Node.js ⚙️
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Update Version ⬆️
        run: |
          ./.github/scripts/update-version.sh
          cat frontend/version.json
      
      - name: Replace PostHog Keys
        run: |
          mkdir -p frontend/assets/config
          
          # Use the template from .github/config to create the runtime config
          cp .github/config/canary-config-template.json frontend/assets/config/canary-config.json
          
          # Update with secrets
          cat > frontend/assets/config/canary-config.json << EOF
          {
            "posthog": {
              "apiKey": "${{ secrets.POSTHOG_PUBLIC_KEY }}",
              "projectId": "${{ secrets.POSTHOG_PROJECT_ID }}",
              "host": "https://us.i.posthog.com"
            },
            "canary": {
              "initialPercentage": 5,
              "maxPercentage": 50,
              "incrementStep": 5
            }
          }
          EOF
      
      - name: Configure Base Path
        run: |
          touch .nojekyll
          mkdir -p config
          echo '{ "baseUrl": "/client-side-canary-deployment" }' > config/gh-pages.json
      
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: frontend  # Deploy the frontend directory
          branch: gh-pages
          clean: true
          single-commit: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Commit Updated Version 💾
        run: |
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          git config --local user.email "${{ env.GIT_USER_EMAIL }}"
          git add frontend/version.json
          git commit -m "Update version to $(jq -r .version frontend/version.json)" || echo "No changes to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Analytics job with consolidated script
  analyze-canary:
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'analyze')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout and setup
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Run unified canary analysis and update
        id: canary_analysis
        env:
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          POSTHOG_PROJECT_ID: ${{ secrets.POSTHOG_PROJECT_ID }}
          POSTHOG_PUBLIC_KEY: ${{ secrets.POSTHOG_PUBLIC_KEY }}
          POSTHOG_HOST: 'https://us.i.posthog.com'
          ERROR_THRESHOLD: ${{ vars.ERROR_THRESHOLD || '0.02' }}
          TIMEFRAME: ${{ vars.TIMEFRAME || '24h' }}
          INCREMENT_STEP: ${{ vars.INCREMENT_STEP || '5' }}
          MAX_PERCENTAGE: ${{ vars.MAX_PERCENTAGE || '50' }}
          SAFETY_THRESHOLD: ${{ vars.SAFETY_THRESHOLD || '2' }}
          USE_MOCK_DATA: 'false'
        run: |
          chmod +x ./.github/scripts/canary-analyzer.js
          node ./.github/scripts/canary-analyzer.js
          
          # Extract values for later steps
          CANARY_PERCENTAGE=$(jq -r '.recommendation.percentage' canary-analysis.json)
          REASON=$(jq -r '.recommendation.reason' canary-analysis.json)
          MESSAGE=$(jq -r '.recommendation.message' canary-analysis.json)
          RECOMMENDED_ACTION=$(jq -r '.analytics.analysis.recommendedAction' canary-analysis.json)
          
          echo "CANARY_PERCENTAGE=$CANARY_PERCENTAGE" >> $GITHUB_ENV
          echo "CANARY_UPDATE_REASON=$REASON" >> $GITHUB_ENV
          echo "CANARY_UPDATE_MESSAGE=$MESSAGE" >> $GITHUB_ENV
          echo "RECOMMENDED_ACTION=$RECOMMENDED_ACTION" >> $GITHUB_ENV
          
          if [[ "$RECOMMENDED_ACTION" == "rollback" ]]; then
            echo "::warning::$MESSAGE"
          else
            echo "::notice::$MESSAGE"
          fi
      
      - name: Create summary report
        run: |
          echo "# Canary Deployment Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Analysis timestamp: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Version | Pageviews | Errors | Error Rate |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----------|--------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Stable | $(jq -r '.analytics.stable.pageviews' canary-analysis.json) | $(jq -r '.analytics.stable.errors' canary-analysis.json) | $(jq -r '.analytics.stable.errorRate' canary-analysis.json) |" >> $GITHUB_STEP_SUMMARY
          echo "| Canary | $(jq -r '.analytics.canary.pageviews' canary-analysis.json) | $(jq -r '.analytics.canary.errors' canary-analysis.json) | $(jq -r '.analytics.canary.errorRate' canary-analysis.json) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Relative error increase: $(jq -r '.analytics.analysis.relativeErrorIncrease' canary-analysis.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Exceeds threshold: $(jq -r '.analytics.analysis.exceedsThreshold' canary-analysis.json)" >> $GITHUB_STEP_SUMMARY
          echo "- **Recommended action**: $(jq -r '.analytics.analysis.recommendedAction' canary-analysis.json)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Canary Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **$CANARY_UPDATE_MESSAGE**" >> $GITHUB_STEP_SUMMARY
      
      - name: Save Analytics Results
        uses: actions/upload-artifact@v4
        with:
          name: analytics-results
          path: canary-analysis.json
          retention-days: 30
      
      - name: Update repositories and deploy
        run: |
          # 1. Update version.json to trigger client refresh
          ./.github/scripts/update-version.sh
          
          # 2. Configure git with credentials
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          git config --local user.email "${{ env.GIT_USER_EMAIL }}"
          
          # 3. Fetch latest changes first to avoid conflicts
          git fetch origin
          
          # 4. Get the latest commit from main to avoid conflicts
          git reset --hard origin/main
          
          # 5. Apply our changes on top of the latest code
          ./.github/scripts/update-version.sh  # Re-run after reset to ensure we have a fresh version
          
          # 6. Ensure config directory exists
          mkdir -p frontend/assets/config/
          
          # 7. Generate configuration files with updated canary percentage
          echo "Generating configuration files with canary percentage: $CANARY_PERCENTAGE%"
          chmod +x ./.github/scripts/canary-analyzer.js
          
          # Pass all required environment variables explicitly
          POSTHOG_API_KEY="${{ secrets.POSTHOG_API_KEY }}" \
          POSTHOG_PROJECT_ID="${{ secrets.POSTHOG_PROJECT_ID }}" \
          POSTHOG_PUBLIC_KEY="${{ secrets.POSTHOG_PUBLIC_KEY }}" \
          POSTHOG_HOST="https://us.i.posthog.com" \
          USE_MOCK_DATA="false" \
          node ./.github/scripts/canary-analyzer.js --percentage=$CANARY_PERCENTAGE
          
          # 8. Verify config files exist and contain the right percentage
          echo "Verifying configuration files:"
          if [ -f "frontend/assets/config/canary-config.json" ]; then
            echo "✓ canary-config.json exists"
            cat frontend/assets/config/canary-config.json | grep -i "canaryPercentage"
          else
            echo "ERROR: ✘ canary-config.json doesn't exist"
            exit 1
          fi
          
          # 9. Stage all changes
          git add frontend/version.json frontend/assets/config/canary-config.json
          
          # 10. Show what files are staged
          echo "Files staged for commit:"
          git diff --staged --name-status
          
          # 11. Check if there are changes to commit
          if ! git diff --staged --quiet; then
            # Check if changes are more than just timestamp updatestamps (but DO commit version changes)
            ONLY_TIMESTAMP_CHANGES=true
            
            # Extract current and previous canary percentage - Fix JSON path
            CURRENT_PERCENTAGE=$(jq -r '.distribution.canaryPercentage' frontend/assets/config/canary-config.json)
            PREVIOUS_PERCENTAGE=$(git show HEAD:frontend/assets/config/canary-config.json 2>/dev/null | jq -r '.distribution.canaryPercentage' 2>/dev/null || echo "0")
            
            # Check if canary percentage has changed
            if [ "$CURRENT_PERCENTAGE" != "$PREVIOUS_PERCENTAGE" ]; then
              ONLY_TIMESTAMP_CHANGES=false
            fi
            
            # Check for other significant changes (ignore lines only containing lastUpdated or version) changed
            if git diff --staged | grep -v "lastUpdated" | grep -v "\"version\"" | grep -E '^\+' | grep -v '^\+\+\+' > /dev/null; then
              ONLY_TIMESTAMP_CHANGES=false
            fiecho "Version number change detected - this is a meaningful change"
            fi
            # Only commit if there are meaningful changes
            if [ "$ONLY_TIMESTAMP_CHANGES" = "false" ]; thenre lastUpdated lines)
              git commit -m "Update canary percentage to $CANARY_PERCENTAGE% and version.json based on analytics"
              ONLY_TIMESTAMP_CHANGES=false
              # 12. Push with improved conflict handling
              echo "Pushing changes to main branch..."
              MAX_RETRIES=3f there are meaningful changes
              RETRY_COUNT=0ESTAMP_CHANGES" = "false" ]; then
              # Adapt commit message based on what changed
              while [ $RETRY_COUNT -lt $MAX_RETRIES ]; doRCENTAGE" ]; then
                # Pull latest changes with rebase to minimize conflictsENTAGE% and version.json based on analytics"
                git pull --rebase origin main
                git commit -m "Update version.json to trigger client refresh"
                # If rebase encounters conflicts, abort and try a different approach
                if [ $? -ne 0 ]; then
                  echo "Rebase failed due to conflicts, trying alternative approach..."
                  git rebase --abortto main branch..."
                  # Reset to origin/main and apply our changes as a new commit
                  git reset --hard origin/main
                  ./.github/scripts/update-version.sh  # Re-run version update
                  chmod +x ./.github/scripts/canary-analyzer.js
                  Pull latest changes with rebase to minimize conflicts
                  # Pass all required environment variables explicitly in conflict scenario
                  POSTHOG_API_KEY="${{ secrets.POSTHOG_API_KEY }}" \
                  POSTHOG_PROJECT_ID="${{ secrets.POSTHOG_PROJECT_ID }}" \t approach
                  POSTHOG_PUBLIC_KEY="${{ secrets.POSTHOG_PUBLIC_KEY }}" \
                  POSTHOG_HOST="https://us.i.posthog.com" \ing alternative approach..."
                  USE_MOCK_DATA="false" \
                  node ./.github/scripts/canary-analyzer.js --percentage=$CANARY_PERCENTAGE
                  git reset --hard origin/main
                  git add frontend/version.json frontend/assets/config/canary-config.json
                  chmod +x ./.github/scripts/canary-analyzer.js
                  # Check for meaningful changes again after resolution
                  ONLY_TIMESTAMP_CHANGES_CONFLICT=trueables explicitly in conflict scenario
                  CURRENT_PERCENTAGE_CONFLICT=$(jq -r '.distribution.canaryPercentage' frontend/assets/config/canary-config.json)
                  POSTHOG_PROJECT_ID="${{ secrets.POSTHOG_PROJECT_ID }}" \
                  if [ "$CURRENT_PERCENTAGE_CONFLICT" != "$PREVIOUS_PERCENTAGE" ]; then
                    ONLY_TIMESTAMP_CHANGES_CONFLICT=false \
                  fiE_MOCK_DATA="false" \
                  node ./.github/scripts/canary-analyzer.js --percentage=$CANARY_PERCENTAGE
                  # Check for version.json changes in conflict resolution
                  if git diff --staged -- frontend/version.json | grep -E '^\+.*"version"' > /dev/null; thenassets/config/canary-config.json
                    ONLY_TIMESTAMP_CHANGES_CONFLICT=false
                    echo "Version number change detected in conflict resolution - this is a meaningful change"# Check for meaningful changes again after resolution
                  fi
                  on)
                  if git diff --staged | grep -v "lastUpdated" | grep -E '^\+' | grep -v '^\+\+\+' > /dev/null; then
                    ONLY_TIMESTAMP_CHANGES_CONFLICT=falseen
                  fiONLY_TIMESTAMP_CHANGES_CONFLICT=false
                  fi
                  if [ "$ONLY_TIMESTAMP_CHANGES_CONFLICT" = "false" ]; then  
                     git commit -m "Update canary percentage to $CANARY_PERCENTAGE% and version.json based on analytics (conflict resolution)" --staged | grep -v "lastUpdated" | grep -v "\"version\"" | grep -E '^\+' | grep -v '^\+\+\+' > /dev/null; then
                  elseNFLICT=false
                     echo "No meaningful changes to commit after conflict resolution"
                  fi
                fi [ "$ONLY_TIMESTAMP_CHANGES_CONFLICT" = "false" ]; then
                percentage to $CANARY_PERCENTAGE% and version.json based on analytics (conflict resolution)"
                # Try to push
                if git push origin main; then
                  echo "Successfully pushed changes to main branch"
                  break
                else
                  RETRY_COUNT=$((RETRY_COUNT + 1))push
                  if [ $RETRY_COUNT -lt $MAX_RETRIES ]; thenit push origin main; then
                    echo "Push failed, retrying in 5 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"echo "Successfully pushed changes to main branch"
                    sleep 5break
                  elseelse
                    echo "::warning::Failed to push changes after $MAX_RETRIES attempts. Continuing with gh-pages update only."
                    break    if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  fi      echo "Push failed, retrying in 5 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
                fi
              done      else
            else        echo "::warning::Failed to push changes after $MAX_RETRIES attempts. Continuing with gh-pages update only."
              echo "No meaningful changes to commit in main branch"
            fi            fi
          else
            echo "No changes to commit in main branch"
          fi
        env: echo "No meaningful changes to commit in main branch"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Combined deployment steps for gh-pagesin branch"
      - name: Deploy to gh-pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          clean: falseed deployment steps for gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}
          folder: frontend  # Deploy from frontend directory
          target-folder: frontend  # Deploy to frontend directory on gh-pages branch
      
      - name: Update summary report with configuration details
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Configuration Update" >> $GITHUB_STEP_SUMMARYet-folder: frontend  # Deploy to frontend directory on gh-pages branch
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following configuration files were updated:" >> $GITHUB_STEP_SUMMARY: Update summary report with configuration details
          echo "- version.json: $(jq -r .version frontend/version.json)" >> $GITHUB_STEP_SUMMARY        run: |
          if [ -f "frontend/assets/config/canary-config.json" ]; thenTEP_SUMMARY
            echo "- canary-config.json: Updated with percentage $CANARY_PERCENTAGE%" >> $GITHUB_STEP_SUMMARY## Configuration Update" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ canary-config.json was not created/updated" >> $GITHUB_STEP_SUMMARYing configuration files were updated:" >> $GITHUB_STEP_SUMMARY
          fiecho "- version.json: $(jq -r .version frontend/version.json)" >> $GITHUB_STEP_SUMMARY
ts/config/canary-config.json" ]; then
  # Adjust canary job - manual.json: Updated with percentage $CANARY_PERCENTAGE%" >> $GITHUB_STEP_SUMMARY
  adjust-canary:    else
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'adjust-canary'-config.json was not created/updated" >> $GITHUB_STEP_SUMMARY
    runs-on: ubuntu-latest
    steps:
      - name: Checkout and setup
        uses: actions/checkout@v3st-canary:
      _dispatch' && github.event.inputs.task == 'adjust-canary'
      - name: Setup Node.js ubuntu-latest
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Run manual canary updateSetup Node.js
        env:
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          POSTHOG_PUBLIC_KEY: ${{ secrets.POSTHOG_PUBLIC_KEY }}    node-version: ${{ env.NODE_VERSION }}
          POSTHOG_PROJECT_ID: ${{ secrets.POSTHOG_PROJECT_ID }}
          USE_MOCK_DATA: 'false'Run manual canary update
        run: |
          chmod +x ./.github/scripts/canary-analyzer.jsG_API_KEY }}
          node ./.github/scripts/canary-analyzer.js --percentage=${{ github.event.inputs.canary_percentage }}POSTHOG_PUBLIC_KEY: ${{ secrets.POSTHOG_PUBLIC_KEY }}
      THOG_PROJECT_ID }}
      - name: Update repositories and deploy
        run: |
          # 1. Update version.json to trigger client refreshchmod +x ./.github/scripts/canary-analyzer.js
          ./.github/scripts/update-version.shtage=${{ github.event.inputs.canary_percentage }}
          
          # 2. Configure git with credentialsme: Update repositories and deploy
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          git config --local user.email "${{ env.GIT_USER_EMAIL }}"trigger client refresh
          ./.github/scripts/update-version.sh
          # 3. Fetch latest changes first to avoid conflicts
          git fetch origin
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          # 4. Get the latest commit from main to avoid conflictsIL }}"
          git reset --hard origin/main
          
          # 5. Apply our changes on top of the latest codegit fetch origin
          ./.github/scripts/update-version.sh  # Re-run after reset to ensure we have a fresh version
          
          # 6. Re-run the canary analyzer with our percentagegit reset --hard origin/main
          chmod +x ./.github/scripts/canary-analyzer.js
          node ./.github/scripts/canary-analyzer.js --percentage=${{ github.event.inputs.canary_percentage }} latest code
          tamps (but DO commit version changes) to ensure we have a fresh version
          # 7. Stage all changes
          git add frontend/version.json frontend/assets/config/canary-config.json6. Re-run the canary analyzer with our percentage
          
          # 8. Check if there are changes to commit
          if ! git diff --staged --quiet; then
            # Check if changes are more than just timestamp updates7. Stage all changes
            ONLY_TIMESTAMP_CHANGES=trueets/config/canary-config.json
            
            # Extract current and previous canary percentage - Fix JSON pathto commit
            CURRENT_PERCENTAGE=$(jq -r '.distribution.canaryPercentage' frontend/assets/config/canary-config.json) git diff --staged --quiet; then
            PREVIOUS_PERCENTAGE=$(git show HEAD:frontend/assets/config/canary-config.json 2>/dev/null | jq -r '.distribution.canaryPercentage' 2>/dev/null || echo "0")# Check if changes are more than just lastUpdated timestamps (but DO commit version changes)
            nsider them meaningful even if only the version number changed
            # Check if canary percentage has changed
            if [ "$CURRENT_PERCENTAGE" != "$PREVIOUS_PERCENTAGE" ]; then canary percentage
              ONLY_TIMESTAMP_CHANGES=falseecho "Version number change detected - this is a meaningful change"RRENT_PERCENTAGE=$(jq -r '.distribution.canaryPercentage' frontend/assets/config/canary-config.json)
            fifiPREVIOUS_PERCENTAGE=$(git show HEAD:frontend/assets/config/canary-config.json 2>/dev/null | jq -r '.distribution.canaryPercentage' 2>/dev/null || echo "0")
            
            # Check for other significant changesre lastUpdated lines)
            if git diff --staged | grep -v "lastUpdated" | grep -v "\"version\"" | grep -E '^\+' | grep -v '^\+\+\+' > /dev/null; then
              ONLY_TIMESTAMP_CHANGES=falseONLY_TIMESTAMP_CHANGES=falseONLY_TIMESTAMP_CHANGES=false
            fi
            
            # Only commit if there are meaningful changesf there are meaningful changession.json changes - consider them meaningful even if only the version number changed
            if [ "$ONLY_TIMESTAMP_CHANGES" = "false" ]; thenESTAMP_CHANGES" = "false" ]; thentaged -- frontend/version.json | grep -E '^\+.*"version"' > /dev/null; then
              git commit -m "Manual update of canary percentage to ${{ github.event.inputs.canary_percentage }}%"# Adapt commit message based on what changedONLY_TIMESTAMP_CHANGES=false
              RCENTAGE" ]; then is a meaningful change"
              # 9. Push with improved conflict handling{ github.event.inputs.canary_percentage }}%"
              echo "Pushing changes to main branch..."
              MAX_RETRIES=3git commit -m "Update version.json to trigger client refresh"eck for other significant changes
              RETRY_COUNT=0
              
              while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                # Pull latest changes with rebase to minimize conflictsto main branch..."
                git pull --rebase origin main
                
                # If rebase encounters conflicts, abort and try a different approach
                if [ $? -ne 0 ]; then
                  echo "Rebase failed due to conflicts, trying alternative approach..."Pull latest changes with rebase to minimize conflicts Push with improved conflict handling
                  git rebase --abort
                  # Reset to origin/main and apply our changes as a new commit
                  git reset --hard origin/maint approach
                  ./.github/scripts/update-version.sh  # Re-run version update
                  chmod +x ./.github/scripts/canary-analyzer.jsing alternative approach..."
                  ase to minimize conflicts
                  # Pass all required environment variables explicitly in conflict scenario
                  POSTHOG_API_KEY="${{ secrets.POSTHOG_API_KEY }}" \git reset --hard origin/main
                  POSTHOG_PROJECT_ID="${{ secrets.POSTHOG_PROJECT_ID }}" \
                  POSTHOG_PUBLIC_KEY="${{ secrets.POSTHOG_PUBLIC_KEY }}" \chmod +x ./.github/scripts/canary-analyzer.js [ $? -ne 0 ]; then
                  POSTHOG_HOST="https://us.i.posthog.com" \
                  USE_MOCK_DATA="false" \ables explicitly in conflict scenario
                  node ./.github/scripts/canary-analyzer.js --percentage=${{ github.event.inputs.canary_percentage }}
                                    POSTHOG_PROJECT_ID="${{ secrets.POSTHOG_PROJECT_ID }}" \                  git reset --hard origin/main
                  git add frontend/version.json frontend/assets/config/canary-config.json
                  \er.js
                  # Check for meaningful changes again after resolutionE_MOCK_DATA="false" \
                  ONLY_TIMESTAMP_CHANGES_CONFLICT=true                  node ./.github/scripts/canary-analyzer.js --percentage=${{ github.event.inputs.canary_percentage }}                  # Pass all required environment variables explicitly in conflict scenario
                  CURRENT_PERCENTAGE_CONFLICT=$(jq -r '.distribution.canaryPercentage' frontend/assets/config/canary-config.json)
ssets/config/canary-config.jsonPROJECT_ID }}" \
                  if [ "$CURRENT_PERCENTAGE_CONFLICT" != "$PREVIOUS_PERCENTAGE" ]; thenHOG_PUBLIC_KEY="${{ secrets.POSTHOG_PUBLIC_KEY }}" \
                     ONLY_TIMESTAMP_CHANGES_CONFLICT=false                  # Check for meaningful changes again after resolution                  POSTHOG_HOST="https://us.i.posthog.com" \
                  fi

                  # Check for version.json changes in conflict resolution
                  if git diff --staged -- frontend/version.json | grep -E '^\+.*"version"' > /dev/null; thenenjson
                    ONLY_TIMESTAMP_CHANGES_CONFLICT=false ONLY_TIMESTAMP_CHANGES_CONFLICT=false
                    echo "Version number change detected in conflict resolution - this is a meaningful change"fi# Check for meaningful changes again after resolution
                  fi_CHANGES_CONFLICT=true
 --staged | grep -v "lastUpdated" | grep -E '^\+' | grep -v '^\+\+\+' > /dev/null; thenCENTAGE_CONFLICT=$(jq -r '.distribution.canaryPercentage' frontend/assets/config/canary-config.json)
                  if git diff --staged | grep -v "lastUpdated" | grep -E '^\+' | grep -v '^\+\+\+' > /dev/null; thenONFLICT=false
                     ONLY_TIMESTAMP_CHANGES_CONFLICT=false
                  fiNFLICT=false
 [ "$ONLY_TIMESTAMP_CHANGES_CONFLICT" = "false" ]; then
                  if [ "$ONLY_TIMESTAMP_CHANGES_CONFLICT" = "false" ]; thenof canary percentage to ${{ github.event.inputs.canary_percentage }}% (conflict resolution)"
                     git commit -m "Manual update of canary percentage to ${{ github.event.inputs.canary_percentage }}% (conflict resolution)"^\+' | grep -v '^\+\+\+' > /dev/null; then
                  else
                     echo "No meaningful changes to commit after conflict resolution"
                  fi
                fi
                pushcommit -m "Manual update of canary percentage to ${{ github.event.inputs.canary_percentage }}% (conflict resolution)"
                # Try to pushit push origin main; thense
                if git push origin main; thenecho "Successfully pushed changes to main branch"   echo "No meaningful changes to commit after conflict resolution"
                  echo "Successfully pushed changes to main branch"breakfi
                  breakelsefi
                else
                  RETRY_COUNT=$((RETRY_COUNT + 1))    if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then  # Try to push
                  if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then      echo "Push failed, retrying in 5 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"  if git push origin main; then
                    echo "Push failed, retrying in 5 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
                    sleep 5      else      break
                  else        echo "::warning::Failed to push changes after $MAX_RETRIES attempts. Continuing with gh-pages update only."    else
                    echo "::warning::Failed to push changes after $MAX_RETRIES attempts. Continuing with gh-pages update only."
                    break            fi            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  fig in 5 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
                fi
              donelse     else
            elseningful changes to commit in main branch"::warning::Failed to push changes after $MAX_RETRIES attempts. Continuing with gh-pages update only."
              echo "No meaningful changes to commit in main branch"
            fi
          else
            echo "No changes to commit in main branch"
          fi  env:      else
        env:.GITHUB_TOKEN }}hanges to commit in main branch"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Deploy to gh-pagesoy-action@v4 main branch"
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          clean: false












          echo "The version.json file has also been updated to trigger client refreshes." >> $GITHUB_STEP_SUMMARY          echo "Changes have been committed to both main and gh-pages branches." >> $GITHUB_STEP_SUMMARY          echo "" >> $GITHUB_STEP_SUMMARY          echo "✅ Successfully updated canary percentage to ${{ github.event.inputs.canary_percentage }}%" >> $GITHUB_STEP_SUMMARY          echo "" >> $GITHUB_STEP_SUMMARY          echo "# Canary Percentage Adjustment" >> $GITHUB_STEP_SUMMARY        run: |      - name: Create summary report                target-folder: frontend  # Deploy to frontend directory on gh-pages branch          folder: frontend  # Deploy from frontend directory          token: ${{ secrets.GITHUB_TOKEN }}










          echo "The version.json file has also been updated to trigger client refreshes." >> $GITHUB_STEP_SUMMARY          echo "Changes have been committed to both main and gh-pages branches." >> $GITHUB_STEP_SUMMARY          echo "" >> $GITHUB_STEP_SUMMARY          echo "✅ Successfully updated canary percentage to ${{ github.event.inputs.canary_percentage }}%" >> $GITHUB_STEP_SUMMARY          echo "" >> $GITHUB_STEP_SUMMARY          echo "# Canary Percentage Adjustment" >> $GITHUB_STEP_SUMMARY        run: |      - name: Create summary report                target-folder: frontend  # Deploy to frontend directory on gh-pages branch          folder: frontend  # Deploy from frontend directory      - name: Deploy to gh-pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          clean: false
          token: ${{ secrets.GITHUB_TOKEN }}
          folder: frontend  # Deploy from frontend directory
          target-folder: frontend  # Deploy to frontend directory on gh-pages branch
      
      - name: Create summary report
        run: |
          echo "# Canary Percentage Adjustment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully updated canary percentage to ${{ github.event.inputs.canary_percentage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Changes have been committed to both main and gh-pages branches." >> $GITHUB_STEP_SUMMARY
          echo "The version.json file has also been updated to trigger client refreshes." >> $GITHUB_STEP_SUMMARY