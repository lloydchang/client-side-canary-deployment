name: Canary Deployment & Analytics

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      task:
        description: 'Task to run (deploy, analyze, or adjust-canary)'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - analyze
          - adjust-canary
      canary_percentage:
        description: 'New canary percentage (only for adjust-canary task)'
        required: false
        type: number
  schedule:
    - cron: '*/5 * * * *' # Run every 5 minutes
  #   - cron: '0 */6 * * *' # Run every 6 hours

permissions:
  contents: write
  pages: write
  id-token: write

# Define reusable values
env:
  NODE_VERSION: '22'
  GIT_USER_NAME: 'lloydchang'
  GIT_USER_EMAIL: 'lloydchang@gmail.com'

jobs:
  # Deployment job
  build-and-deploy:
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'deploy')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
      
      - name: Setup Node.js ⚙️
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Update Version ⬆️
        run: |
          ./.github/scripts/update-version.sh
          cat frontend/version.json
      
      - name: Replace PostHog Keys
        run: |
          mkdir -p frontend/assets/config
          
          # Use the template from .github/config to create the runtime config
          cp .github/config/canary-config-template.json frontend/assets/config/canary-config.json
          
          # Update with secrets
          cat > frontend/assets/config/canary-config.json << EOF
          {
            "posthog": {
              "apiKey": "${{ secrets.POSTHOG_PUBLIC_KEY }}",
              "projectId": "${{ secrets.POSTHOG_PROJECT_ID }}",
              "host": "https://us.i.posthog.com"
            },
            "canary": {
              "initialPercentage": 5,
              "maxPercentage": 50,
              "incrementStep": 5
            }
          }
          EOF
      
      - name: Configure Base Path
        run: |
          touch .nojekyll
          mkdir -p config
          echo '{ "baseUrl": "/client-side-canary-deployment" }' > config/gh-pages.json
      
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: frontend  # Deploy the frontend directory
          branch: gh-pages
          clean: true
          single-commit: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Commit Updated Version 💾
        run: |
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          git config --local user.email "${{ env.GIT_USER_EMAIL }}"
          git add frontend/version.json
          git commit -m "Update version to $(jq -r .version frontend/version.json)" || echo "No changes to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Analytics job with consolidated script
  analyze-canary:
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'analyze')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout and setup
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Run unified canary analysis and update
        id: canary_analysis
        env:
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          POSTHOG_PROJECT_ID: ${{ secrets.POSTHOG_PROJECT_ID }}
          POSTHOG_PUBLIC_KEY: ${{ secrets.POSTHOG_PUBLIC_KEY }}
          POSTHOG_HOST: 'https://us.i.posthog.com'
          ERROR_THRESHOLD: ${{ vars.ERROR_THRESHOLD || '0.02' }}
          TIMEFRAME: ${{ vars.TIMEFRAME || '24h' }}
          INCREMENT_STEP: ${{ vars.INCREMENT_STEP || '5' }}
          MAX_PERCENTAGE: ${{ vars.MAX_PERCENTAGE || '50' }}
          SAFETY_THRESHOLD: ${{ vars.SAFETY_THRESHOLD || '2' }}
          USE_MOCK_DATA: 'false'
        run: |
          chmod +x ./.github/scripts/canary-analyzer.js
          node ./.github/scripts/canary-analyzer.js
          
          # Extract values for later steps
          CANARY_PERCENTAGE=$(jq -r '.recommendation.percentage' canary-analysis.json)
          REASON=$(jq -r '.recommendation.reason' canary-analysis.json)
          MESSAGE=$(jq -r '.recommendation.message' canary-analysis.json)
          RECOMMENDED_ACTION=$(jq -r '.analytics.analysis.recommendedAction' canary-analysis.json)
          
          echo "CANARY_PERCENTAGE=$CANARY_PERCENTAGE" >> $GITHUB_ENV
          echo "CANARY_UPDATE_REASON=$REASON" >> $GITHUB_ENV
          echo "CANARY_UPDATE_MESSAGE=$MESSAGE" >> $GITHUB_ENV
          echo "RECOMMENDED_ACTION=$RECOMMENDED_ACTION" >> $GITHUB_ENV
          
          if [[ "$RECOMMENDED_ACTION" == "rollback" ]]; then
            echo "::warning::$MESSAGE"
          else
            echo "::notice::$MESSAGE"
          fi
      
      - name: Create summary report
        run: |
          echo "# Canary Deployment Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Analysis timestamp: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Version | Pageviews | Errors | Error Rate |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----------|--------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Stable | $(jq -r '.analytics.stable.pageviews' canary-analysis.json) | $(jq -r '.analytics.stable.errors' canary-analysis.json) | $(jq -r '.analytics.stable.errorRate' canary-analysis.json) |" >> $GITHUB_STEP_SUMMARY
          echo "| Canary | $(jq -r '.analytics.canary.pageviews' canary-analysis.json) | $(jq -r '.analytics.canary.errors' canary-analysis.json) | $(jq -r '.analytics.canary.errorRate' canary-analysis.json) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Relative error increase: $(jq -r '.analytics.analysis.relativeErrorIncrease' canary-analysis.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Exceeds threshold: $(jq -r '.analytics.analysis.exceedsThreshold' canary-analysis.json)" >> $GITHUB_STEP_SUMMARY
          echo "- **Recommended action**: $(jq -r '.analytics.analysis.recommendedAction' canary-analysis.json)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Canary Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **$CANARY_UPDATE_MESSAGE**" >> $GITHUB_STEP_SUMMARY
      
      - name: Save Analytics Results
        uses: actions/upload-artifact@v4
        with:
          name: analytics-results
          path: canary-analysis.json
          retention-days: 30
      
      # Combined step for updating repos and deploying to both branches
      - name: Update repositories and deploy
        run: |
          # 1. Update version.json to trigger client refresh
          ./.github/scripts/update-version.sh
          
          # 2. Configure git with credentials
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          git config --local user.email "${{ env.GIT_USER_EMAIL }}"
          
          # 3. Fetch latest changes first to avoid conflicts
          git fetch origin
          
          # 4. Get the latest commit from main to avoid conflicts
          git reset --hard origin/main
          
          # 5. Apply our changes on top of the latest code
          ./.github/scripts/update-version.sh  # Re-run after reset to ensure we have a fresh version
          
          # 6. Ensure config directory exists
          mkdir -p frontend/assets/config/
          
          # 7. Generate configuration files with updated canary percentage
          echo "Generating configuration files with canary percentage: $CANARY_PERCENTAGE%"
          chmod +x ./.github/scripts/canary-analyzer.js
          node ./.github/scripts/canary-analyzer.js
          
          # 8. Verify config files exist and contain the right percentage
          echo "Verifying configuration files:"
          if [ -f "frontend/assets/config/canary-config.js" ]; then
            echo "✓ canary-config.js exists"
            cat frontend/assets/config/canary-config.js | grep -i "canaryPercentage"
          else
            echo "ERROR: ✘ canary-config.js doesn't exists"
            exit 1
          fi
          
          # 9. Stage all changes
          git add frontend/version.json frontend/assets/config/canary-config.json frontend/assets/config/canary-config.js
          
          # 10. Show what files are staged
          echo "Files staged for commit:"
          git diff --staged --name-status
          
          # 11. Check if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "Update canary percentage to $CANARY_PERCENTAGE% and version.json based on analytics"
            
            # 12. Push with improved conflict handling
            echo "Pushing changes to main branch..."
            MAX_RETRIES=3
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              # Pull latest changes with rebase to minimize conflicts
              git pull --rebase origin main
              
              # If rebase encounters conflicts, abort and try a different approach
              if [ $? -ne 0 ]; then
                echo "Rebase failed due to conflicts, trying alternative approach..."
                git rebase --abort
                # Reset to origin/main and apply our changes as a new commit
                git reset --hard origin/main
                ./.github/scripts/update-version.sh  # Re-run version update
                chmod +x ./.github/scripts/canary-analyzer.js
                node ./.github/scripts/canary-analyzer.js  # Re-run analysis
                git add frontend/version.json frontend/assets/config/canary-config.json frontend/assets/config/canary-config.js
                git commit -m "Update canary percentage to $CANARY_PERCENTAGE% and version.json based on analytics (conflict resolution)"
              fi
              
              # Try to push
              if git push origin main; then
                echo "Successfully pushed changes to main branch"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Push failed, retrying in 5 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
                  sleep 5
                else
                  echo "::warning::Failed to push changes after $MAX_RETRIES attempts. Continuing with gh-pages update only."
                  break
                fi
              fi
            done
          else
            echo "No changes to commit in main branch"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Combined deployment steps for gh-pages
      - name: Deploy to gh-pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          clean: false
          token: ${{ secrets.GITHUB_TOKEN }}
          folder: frontend  # Deploy from frontend directory
          target-folder: frontend  # Deploy to frontend directory on gh-pages branch
      
      - name: Update summary report with configuration details
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Configuration Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following configuration files were updated:" >> $GITHUB_STEP_SUMMARY
          echo "- version.json: $(jq -r .version frontend/version.json)" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "frontend/assets/config/canary-config.js" ]; then
            echo "- canary-config.js: Updated with percentage $CANARY_PERCENTAGE%" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ canary-config.js was not created/updated" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "frontend/assets/config/canary-config.json" ]; then
            echo "- canary-config.json: Updated with percentage $CANARY_PERCENTAGE%" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ canary-config.json was not created/updated" >> $GITHUB_STEP_SUMMARY
          fi

  # Adjust canary job - manual
  adjust-canary:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'adjust-canary'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout and setup
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Run manual canary update
        env:
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          POSTHOG_PUBLIC_KEY: ${{ secrets.POSTHOG_PUBLIC_KEY }}
          POSTHOG_PROJECT_ID: ${{ secrets.POSTHOG_PROJECT_ID }}
          USE_MOCK_DATA: 'false'
        run: |
          chmod +x ./.github/scripts/canary-analyzer.js
          node ./.github/scripts/canary-analyzer.js --percentage=${{ github.event.inputs.canary_percentage }}
      
      # Combined step for updating repos and deploying to both branches
      - name: Update repositories and deploy
        run: |
          # 1. Update version.json to trigger client refresh
          ./.github/scripts/update-version.sh
          
          # 2. Configure git with credentials
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          git config --local user.email "${{ env.GIT_USER_EMAIL }}"
          
          # 3. Fetch latest changes first to avoid conflicts
          git fetch origin
          
          # 4. Get the latest commit from main to avoid conflicts
          git reset --hard origin/main
          
          # 5. Apply our changes on top of the latest code
          ./.github/scripts/update-version.sh  # Re-run after reset to ensure we have a fresh version
          
          # 6. Re-run the canary analyzer with our percentage
          chmod +x ./.github/scripts/canary-analyzer.js
          node ./.github/scripts/canary-analyzer.js --percentage=${{ github.event.inputs.canary_percentage }}
          
          # 7. Stage all changes
          git add frontend/version.json frontend/assets/config/canary-config.json frontend/assets/config/canary-config.js
          
          # 8. Check if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "Manual update of canary percentage to ${{ github.event.inputs.canary_percentage }}%"
            
            # 9. Push with improved conflict handling
            echo "Pushing changes to main branch..."
            MAX_RETRIES=3
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              # Pull latest changes with rebase to minimize conflicts
              git pull --rebase origin main
              
              # If rebase encounters conflicts, abort and try a different approach
              if [ $? -ne 0 ]; then
                echo "Rebase failed due to conflicts, trying alternative approach..."
                git rebase --abort
                # Reset to origin/main and apply our changes as a new commit
                git reset --hard origin/main
                ./.github/scripts/update-version.sh  # Re-run version update
                chmod +x ./.github/scripts/canary-analyzer.js
                node ./.github/scripts/canary-analyzer.js --percentage=${{ github.event.inputs.canary_percentage }}  # Re-run with manual percentage
                git add frontend/version.json frontend/assets/config/canary-config.json frontend/assets/config/canary-config.js
                git commit -m "Manual update of canary percentage to ${{ github.event.inputs.canary_percentage }}% (conflict resolution)"
              fi
              
              # Try to push
              if git push origin main; then
                echo "Successfully pushed changes to main branch"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Push failed, retrying in 5 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
                  sleep 5
                else
                  echo "::warning::Failed to push changes after $MAX_RETRIES attempts. Continuing with gh-pages update only."
                  break
                fi
              fi
            done
          else
            echo "No changes to commit in main branch"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Combined deployment steps for gh-pages
      - name: Deploy to gh-pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          clean: false
          token: ${{ secrets.GITHUB_TOKEN }}
          folder: frontend  # Deploy from frontend directory
          target-folder: frontend  # Deploy to frontend directory on gh-pages branch
      
      - name: Create summary report
        run: |
          echo "# Canary Percentage Adjustment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully updated canary percentage to ${{ github.event.inputs.canary_percentage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Changes have been committed to both main and gh-pages branches." >> $GITHUB_STEP_SUMMARY
          echo "The version.json file has also been updated to trigger client refreshes." >> $GITHUB_STEP_SUMMARY
